
#ifndef CELLSINTERLINKED_BUILDINFO_H
#define CELLSINTERLINKED_BUILDINFO_H

namespace BuildInfo {

    constexpr const char *projectName = "@PROJECT_NAME@";
    constexpr const char *projectVersion = "@PROJECT_VERSION@";
    // @formatter:off
    constexpr const int projectVersionMajor = @PROJECT_VERSION_MAJOR@;
    constexpr const int projectVersionMinor = @PROJECT_VERSION_MINOR@;
    constexpr const int projectVersionPatch = @PROJECT_VERSION_PATCH@;
    // @formatter:on
    constexpr const char *buildType = "@CMAKE_BUILD_TYPE@";
    constexpr const char *baseDirectory = "@CMAKE_CURRENT_SOURCE_DIR@";

    constexpr bool stringEquals(const char *string1, const char *string2);

    constexpr bool isPlatformSupported();

    constexpr bool isWindows();

    constexpr bool isIgnoreUnsupportedPlatform();

    constexpr void assertSupportedPlatform();

    constexpr bool isDebug();

    constexpr bool stringEquals(const char *string1, const char *string2) {
        int index = 0;

        while (true) {
            const char char1 = string1[index];
            const char char2 = string2[index];

            if (char1 == 0 && char2 == 0) {
                // both strings ending -- equal
                return true;
            } else if (char1 == 0 || char2 == 0) {
                // only one string ending -- not equal
                return false;
            } else if (char1 != char2) {
                // characters don't match -- not equal
                return false;
            }

            index++;
        }
    }

    constexpr bool isPlatformSupported() {
        return isWindows();
    }

    constexpr bool isWindows() {
#ifdef _WIN32
        return true;
#else
        return false;
#endif
    }

    constexpr bool isIgnoreUnsupportedPlatform() {
        return stringEquals("@IGNORE_UNSUPPORTED_PLATFORM@", "ON");
    }

    constexpr void assertSupportedPlatform() {
        static_assert(isPlatformSupported() || isIgnoreUnsupportedPlatform(),
                      "The current platform is not supported. You can ignore this with the CMake option "
                      "\"IGNORE_UNSUPPORTED_PLATFORM\".");
    }

    constexpr bool isDebug() {
        return stringEquals(buildType, "Debug");
    }
}

#endif //CELLSINTERLINKED_BUILDINFO_H